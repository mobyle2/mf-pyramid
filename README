This is a new development, mainly for own training, and not for use yet.

admin provides annotations on a Ming object maybe will use mongokit (@mf_decorator) to analyse objects and create actions and forms on objects automatically.

Goal is to generate an admin dashboard for each object (show/edit/delete per object and list of objects).

renderer is in charge of generating HTML per attribute type.

more customization will also be available to force type of the attribute (Checkbox etc...)

Pyramid routes and templates will be set automatically to access objects via REST.

TODO:
  see bugs/features in github
  - finish mf_add to real add the object in mongo
  - add edit
  - object references not yet managed
  - _id managed as a string for the moment

  - search : add view to search with filter

LIMITATIONS: ArrayRenderer does not support arrays of objects, only arrays of basic types

LICENSE: LGPL

WARNING: there are considerations with pymongo and ming versions to take into account.
Code is currently related to ming 3.0, not binded to latest pymongo.

USAGE:

User must have *all* acl permissions on *mf.dashboard.Dashboard* to access the dashboard view via /admin as well as to the add/edit/delete operations on objects

Add mf_decorator above your Ming classes

For dashboard, to add User and Group, insert in Pyramid init :

Dashboard.add_dashboard([User,Group],config)

Warning: this should be added after your routes declaration because it inserts generic routes to match objets:

/users/ (GET/PUT)
/users/id (POST,DELETE)
/groups/
/groups/id
...

If user must have only limited access to a query, i.e list only a subset of an object (/users), it is necessary to add to the object a function defined as:

    def my(self, control):
      '''
      Return a mongodb filter on object
      control is a mf.views.MF_LIST or MF_MANAGE according to expected access on object
      if method returns None, then no access is allowed
      if method returns {}, then access is allowed
      if method returns a mongo filter, it will be applied on request to access object(s)
      ....
      return filter

If this function is not defined, then all elements are available via GET method.
Filter is a mongo filter


Other functions may be implemented in objects to override default behaviour:

    def render(self,fields = None):
      """
      Render in HTML form an object

      param: fields List of fields to show
      type: list
      rparam: HTML form
      rtype: str
      """

    def render_search(self, fields = None):
      """
      Render in HTML a search form an object

      param: fields List of fields to show, limited to first level of document
      type: list
      rparam: HTML form
      rtype: str
      """

    def bind_form(self,request):
      """
      Binds a request dictionnary to the object

      :param request: request.params.items() in the form [ (key1,value1), (key1,value2), (key2,value1), ...]
      :type request: list
      :return: list of fields in error
      """

If any is defined in object, then object method is used, else default implementation is used.


Acknowledgements:

parseDateTime from http://aralbalkan.com/1512
